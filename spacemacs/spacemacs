;; -*- mode: emacs-lisp -*-

(defun dotspacemacs/layers ()
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     better-defaults
     emacs-lisp
     markdown
     evil-commentary
     evil-snipe
     vim-empty-lines
     (javascript :variables javascript t)
     git
     react
     org
     php
     (python
      :variables python-enable-yapf-format-on-save t)
     (auto-completion
      :variables
      auto-completion-enable-sort-by-usage t
      auto-completion-enable-help-help-tooltip nil)
     (syntax-checking :variables syntax-checking-enable-by-default nil)
     version-control ;; watch out for issue = #4534
     html
 )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages
   '(
     ;;js-comint
     ;;nodejs-repl
     (eclipse-theme :location
                    (recipe :fetcher github
                            :repo "abo-abo/eclipse-theme"))
     )
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '(spaceline)
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'. (default t)
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   dotspacemacs-elpa-https nil
   dotspacemacs-elpa-timeout 5
   dotspacemacs-check-for-update nil
   ;; One of `vim', `emacs' or `hybrid'.
   dotspacemacs-editing-style 'vim
   dotspacemacs-verbose-loading nil
   ;; One of `nil', `random' or `officiel' or your own (core/banners).
   dotspacemacs-startup-banner nil
   ;; Possible values are: `recents' `bookmarks' `projects'.
   dotspacemacs-startup-lists '(recents projects)
   dotspacemacs-startup-recent-list-size 5
   dotspacemacs-themes '(spacemacs-light eclipse)
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Approved: M+ 2m, M+ 1mn, Fira Mono, CamingoCode, Monoid, Aurulent Sans Mono,  Menlo, Meslo LG S DZ
   dotspacemacs-default-font '("CamingoCode"
                               :size 15
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; Set leader key
   dotspacemacs-leader-key "SPC"
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   dotspacemacs-distinguish-gui-tab nil
   dotspacemacs-command-key ":"
   dotspacemacs-remap-Y-to-y$ t
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   dotspacemacs-auto-resume-layouts nil
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   dotspacemacs-max-rollback-slots 5
   ;; If non nil then `ido' replaces `helm' for some commands. For now only
   dotspacemacs-use-ido nil
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   dotspacemacs-helm-no-header nil
   dotspacemacs-helm-position 'bottom
   dotspacemacs-enable-paste-micro-state nil
   dotspacemacs-which-key-delay 0.4
   dotspacemacs-which-key-position 'bottom
   dotspacemacs-loading-progress-bar nil
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native nil
   dotspacemacs-maximized-at-startup nil
   dotspacemacs-active-transparency 90
   dotspacemacs-inactive-transparency 90
   dotspacemacs-mode-line-unicode-symbols t
   dotspacemacs-smooth-scrolling nil
   dotspacemacs-line-numbers nil
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-highlight-delimiters 'all
   dotspacemacs-persistent-server nil
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   dotspacemacs-default-package-repository nil
   dotspacemacs-whitespace-cleanup 'changed
   ))

(defun stormpat/web-mode-hook ()
  "Custom hooks for web-mode"
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-style-padding 2)
  (setq web-mode-script-padding 2)
  (setq web-mode-code-indent-offset 2)
  (setq-default web-mode-markup-indent-offset 2)
  )

;; (defun stormpat/enable-eslint-disable-jshint ()
;;   "Always use eslint instead of jshint"
;;   (progn
;;     (flycheck-add-mode 'javascript-eslint 'js2-mode)
;;     (push 'javascript-jshint flycheck-disabled-checkers)))

;; Print the current file name to the buffer.
(defun u/add-current-file-name ()
  "Insert the full path file name into the current buffer."
  (interactive)
  (insert (buffer-file-name (window-buffer (minibuffer-selected-window)))))

;; Live serach the spacemacs docs with helm.
(defun u/search-spacemacs-docs ()
  "Search the spacemacs docs using helm-do-ag"
  (interactive)
  (helm-do-ag "~/.emacs.d/doc/"))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
   It is called immediately after `dotspacemacs/init'.  You are free to put almost
   any user code here.  The exception is org related code, which should be placed
   in `dotspacemacs/user-config'."
  (add-hook 'json-mode-hook
            (lambda ()
              (make-local-variable 'js-indent-level)
              (setq js-indent-level 2)))
  ;; Limit kill ring to 10 items
  (setq kill-ring-max 10)
  ;; Weird error (https://github.com/syl20bnr/spacemacs/issues/3920)
  (setq exec-path-from-shell-arguments '("-l"))
  )


(defun dotspacemacs/user-config ()
  "Configuration function for user code.
   This function is called at the very end of Spacemacs initialization after
   layers configuration. You are free to put any user code."
  ;; Silence js2-mode errors (instead lint with eslint)
  ;; (setq-default js2-strict-trailing-comma-warning nil)
  ;; (setq js2-highlight-external-variables nil)

  ;; Python lint setup.
  (setq flycheck-python-pylint-executable "pylint")
  (add-hook 'python-mode-hook (lambda ()
                                (flycheck-mode 1)
                                (semantic-mode 1)
                                (setq flycheck-checker 'python-pylint
                                      flycheck-checker-error-threshold 900
                                      flycheck-pylintrc "~/.pylintrc")))
  ;; Use eslint instead of jshint
  (require 'flycheck)
  (setq flycheck-checkers '(javascript-eslint))
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint)))
  (flycheck-add-mode 'javascript-eslint 'js2-mode)

  ;; (setq js2-mode-show-parse-errors nil)
  ;; (setq js2-mode-show-strict-warnings nil)
  ;; Nodejs / comint evalutation (uncommen if using comint/node)
  ;;(setq inferior-js-program-command "node")
  ;;(setenv "NODE_NO_READLINE" "1")
  ;; Make which-key more snappy
  (setq which-key-idle-delay 0.01)
  (setq which-key-idle-secondary-delay 0.01)
  ;; We want company-mode enabled globally
  (global-company-mode)
  ;; Always truncate lines
  (setq-default truncate-lines t)
  ;; Disable smartparens
  (turn-off-show-smartparens-mode)
  ;; Simplyfy the GUI title
  (setq frame-title-format "M-x")
  ;; Paste behaviour
  (fset 'evil-visual-update-x-selection 'ignore)
  (setq powerline-default-separator 'arrow)
  (setq flycheck-checker-error-threshold 400)
  ;;(add-to-hooks #'linum-mode '(js2-mode-hook))
  (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
  (setq-default company-idle-delay 0.0)
  ;; Set indents to two spaces, override some defaults.
  ;; (setq-default js2-basic-offset 2)
  (setq-default js-indent-level 2)
  (setq-default css-indent-offset 2)
  (setq-default web-mode-markup-indent-offset 2)
  (setq tab-width 2)
  ;; (setq-default flycheck-jshintrc "~/.jshintrc")
  ;; (setq-default flycheck-jscsrc "~/.jscsrc")
  ;; Initialize web-mode custom hooks
  (add-hook 'web-mode-hook 'stormpat/web-mode-hook)
  ;; Set helm ignore folders
  ;;(add-to-list 'projectile-ignored-directories "node_modules")
  ;; Some tweaks to get better behaviour on osx. (GNU Emacs 25.1.xxx)
  (setq x-select-enable-clipboard t)
  (setq mac-option-modifier nil
        mac-command-modifier 'meta)
  ;; Disable neotree vc-integration -> spacemacs/issues/2943
  (setq neo-vc-integration nil)
  ;; Try to fix heavy font-locks on large buffers
  ;; Try to speed up js2-mode
  ;; (setq js2-idle-timer-delay 2)
  (setq blink-matching-paren nil)
  ;;(setq font-lock-maximum-decoration nil)
  ;; Map keys to user customer functions [Use `m` for namespacing]
  ;; File related
  (evil-leader/set-key (kbd "omc") 'u/add-current-file-name)
  (evil-leader/set-key (kbd "omr") 'recentf-open-files)
  ;; Search related
  (evil-leader/set-key (kbd "omd") 'u/search-spacemacs-docs)
  ;; Git related
  (evil-leader/set-key (kbd "ogx") 'magit-blame-quit)
  ;; Evalute JavaScript
  (evil-leader/set-key (kbd "oe") 'js-send-buffer-and-go)
  ;; Buffer related (should be under o directly)
  (evil-leader/set-key (kbd "ol") 'avy-goto-line)
  (evil-leader/set-key (kbd "oc") 'avy-copy-line)
  (evil-leader/set-key (kbd "or") 'avy-copy-region)
  (evil-leader/set-key (kbd "oh") 'avy-goto-char-in-line)
  (evil-leader/set-key (kbd "on") 'spacemacs/new-empty-buffer)
  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#242424" "#e5786d" "#95e454" "#cae682" "#8ac6f2" "#333366" "#ccaa8f" "#f6f3e8"])
 '(custom-safe-themes
   (quote
    ("fa2b58bb98b62c3b8cf3b6f02f058ef7827a8e497125de0254f56e373abee088" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "ed58c97cceaa93c5b77dae669ae8c984295e440ac52aff10539134c8bd7568fe" default)))
 '(package-selected-packages
   (quote
    (with-editor async dash toc-org org-repo-todo org-present org-pomodoro org-plus-contrib org-bullets htmlize gnuplot git-gutter-fringe+ git-gutter-fringe git-gutter+ git-gutter diff-hl packed smartparens projectile helm helm-core multiple-cursors json-reformat magit spinner pythonic mmm-mode markdown-toc markdown-mode gh-md pyvenv pytest pyenv-mode pip-requirements hy-mode helm-pydoc cython-mode company-anaconda anaconda-mode ws-butler window-numbering web-mode web-beautify volatile-highlights tagedit sql-indent spacemacs-theme smooth-scrolling smeargle slim-mode scss-mode sass-mode restart-emacs rainbow-delimiters popwin phpunit phpcbf php-extras php-auto-yasnippets persp-mode pcre2el paradox page-break-lines orgit open-junk-file nodejs-repl neotree move-text magit-gitflow macrostep lorem-ipsum linum-relative leuven-theme less-css-mode json-mode js2-refactor js2-mode js-doc js-comint jade-mode info+ indent-guide ido-vertical-mode hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation help-fns+ helm-themes helm-swoop helm-projectile helm-mode-manager helm-make helm-gitignore helm-flx helm-descbinds helm-css-scss helm-company helm-c-yasnippet helm-ag haml-mode google-translate golden-ratio gitignore-mode gitconfig-mode gitattributes-mode git-timemachine git-messenger flycheck-pos-tip flycheck flx-ido fill-column-indicator fancy-battery expand-region exec-path-from-shell evil-visualstar evil-tutor evil-surround evil-snipe evil-search-highlight-persist evil-numbers evil-mc evil-matchit evil-magit evil-lisp-state evil-jumper evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-commentary evil-args evil-anzu eval-sexp-fu emmet-mode elisp-slime-nav drupal-mode define-word company-web company-tern company-statistics company-quickhelp company coffee-mode clean-aindent-mode buffer-move bracketed-paste auto-yasnippet auto-highlight-symbol auto-compile aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line ac-ispell quelpa package-build use-package which-key bind-key bind-map evil eclipse-theme)))
 '(sql-connection-alist
   (quote
    (("innovoice"
      (sql-product
       (quote mysql))
      (sql-user "root")
      (sql-database "innovoice")
      (sql-server "192.168.22.10"))))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
